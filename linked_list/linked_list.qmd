---
title: "Binary Trees - Python"
author: "Tural Sadigov"
date: today
format: 
    html:
      theme: 
        light: united
        dark: darkly
engine: knitr
editor: visual
chunk_output_type: console
fig-align: center
always_allow_html: true
toc: true
toc-location: right
number-sections: true
page-layout: article
code-overflow: scroll
code-line-numbers: false
code-copy: true
execute:
  echo: true
  warning: false
  eval: true
  output: true
  error: false
  freeze: true
  out.width: "100%"
  cache: false
---

# Node class

```{python}
class Node:
  def __init__(self, value):
    self.value = value
    self.next = None
```

# create a linked list

```{python}
a = Node('A')
b = Node('B')
c = Node('C')
d = Node('D')
a.next = b
b.next = c
c.next = d
```

# traverse linked-list

Note that linked list we created is A --> B --> C --> D --> Null

```{python}
def print_linked_list(head):
  while head:
    print(head.value)
    head = head.next
  
print_linked_list(a)
```

# traverse linked-list RECURSIVELY

```{python}
def print_linked_list_recursively(head):
  if head is None:
    return
  print(head.val)
  print_linked_list_recursively(head.next)
  
print_linked_list(a)
```

# return linked list values in order

```{python}
def ll_values(head):
  if head is None:
    return
  res = []
  while head:
    res.append(head.value)
    head = head.next
  return res

ll_values(a)
```

# return linked list values in order recursively

```{python}
def ll_values_rec(head):
  if head is None:
    return
  return [head.value] + ll_values_rec(head.next) 

ll_values(a)
```

# sum of the values

```{python}
def sum_ll(head):
  if head is None:
    return 0
  s = 0
  while head:
    s += head.value
    head = head.next
  return s

a = Node(2)
b = Node(8)
c = Node(3)
d = Node(7)
a.next = b
b.next = c
c.next = d

sum_ll(a)
```

# sum of the values recursively

```{python}
def sum_ll_rec(head):
  if head is None:
    return 0
  return head.value + sum_ll_rec(head.next)

sum_ll_rec(a)
```

# find target value

```{python}
def find_target(head, target):
  if head is None:
    return False
  while head:
    if head.value == target:
      return True
    head = head.next
  return False

find_target(a, 3)
find_target(a, 9)
```

# find target value recursively

```{python}
def find_target_rec(head, target):
  if head is None:
    return False
  if head.value == target:
    return True
  return find_target_rec(head.next, target)

find_target_rec(a, 3)
find_target_rec(a, 9)
```

# get node value at a given index

```{python}
def get_node_value(head, index):
  if head is None:
    return
  count = 0
  while head:
    if count == index:
      return head.value
    head = head.next
    count +=1
  return None
get_node_value(a, 3)
get_node_value(a, 2)
```

# get node value at a given index recursively

```{python}
def get_node_value_rec(head, index):
  if head is None:
    return
  if index == 0:
    return head.value
  return get_node_value_rec(head.next, index-1)

get_node_value_rec(a, 3)
get_node_value_rec(a, 2)
```


# reverse a linked list

```{python}
def reverse_ll(head):
  prev, cur = None, head
  
  while cur:
    temp = cur.next
    cur.next = prev
    prev = cur
    cur = temp
    
  return prev
```

```{python}
class Node:
  def __init__(self, value):
    self.value = value
    self.next = None
    
    
a = Node('A')
b = Node('B')
c = Node('C')
d = Node('D')
a.next = b
b.next = c
c.next = d
print_linked_list(a)
reverse_ll(a)
print_linked_list(a)
print_linked_list(d)
```

# reverse a linked list recursively

## Method 1

```{python}
def reverse_ll_rec(head):
  if head is None: 
    return None
  
  new_head = head
  if head.next:
    new_head = reverse_ll_rec(head.next)
    head.next.next = head
  head.next = None
  
  return new_head
```

## Method 2

```{python}
def reverse_ll_rec_2(head, prev = None):
  if head is None:
    return prev
  
  temp = head.next
  head.next = prev
  return reverse_ll_rec_2(temp, head)
```


# zipper list problem 

## Method 1

```{python}
def zipper_list(head1, head2):
  cur1 = head1
  cur2 = head2
  while cur1 and cur2:
    temp1 = cur1.next
    cur1.next = cur2
    temp2 = cur2.next
    if temp1:
      cur2.next = temp1
    cur1 = temp1
    cur2 = temp2
  return head1  


class Node:
  def __init__(self, value):
    self.value = value
    self.next = None
    
a = Node('A')
b = Node('B')
a.next = b

q = Node('Q')


print_linked_list(zipper_list(a, q))
```

## Method 2

```{python}
def zipper_list_2(head1, head2):
  tail = head1
  cur1 = head1.next
  cur2 = head2
  count = 0
  while cur1 and cur2:
    if count%2==0:
      tail.next = cur2
      cur2 = cur2.next
    else:
      tail.next = cur1
      cur1 = cur1.next
    count +=1
    tail = tail.next
  
  if cur1:
    tail.next = cur1
  if cur2:
    tail.next = cur2
  
  return head1  

class Node:
  def __init__(self, value):
    self.value = value
    self.next = None
    
a = Node('A')
b = Node('B')
a.next = b

q = Node('Q')
r = Node('R')
s = Node('S')
q.next = r
r.next = s

print_linked_list(zipper_list_2(a, q))
```

# zipper list problem recursively

```{python}
def zipper_list_rec(head1, head2):
  if head1 is None and head2 is None:
    return None
  if head2 is None:
    return head1
  if head1 is None:
    return head2
  
  temp1 = head1.next
  temp2 = head2.next
  head1.next = head2
  head2.next = zipper_list_rec(temp1, temp2)
  return head1

a = Node('A')
b = Node('B')
a.next = b

q = Node('Q')
r = Node('R')
s = Node('S')
q.next = r
r.next = s

print_linked_list(zipper_list_rec(a, q))
```

