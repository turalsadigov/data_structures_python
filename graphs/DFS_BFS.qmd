---
title: "Graphs - Trees - DFS - BFS - Python"
author: "Tural Sadigov"
date: today
format: 
    html:
      theme: 
        light: united
        dark: darkly
      smooth-scroll: true
engine: knitr
always_allow_html: true
editor: visual
toc: true
toc-location: right
number-sections: true
cap-location: bottom
fig-cap-location: bottom
tbl-cap-location: top
page-layout: article
code-fold: show
code-summary: "Collapse/show the code below"
code-overflow: scroll
code-line-numbers: true
code-copy: true
execute:
  echo: true
  warning: false
  eval: true
  output: true
  error: false
  cache: false
  freeze: true
  out.width: "100%"
fig-align: center

---


# Depth First Search

## iterative approach

```{python}
def has_path_depth_first(graph, src, dest):
    stack = [src]
    while stack:
        current = stack.pop()
        if current == dest:
            return True
        for neighbor in graph[current]:
            stack.append(neighbor)
    return False
```

Testing DF path

```{python}
graph = {
  'f':['g', 'i'],
  'g': ['h'],
  'i': ['g','k'],
  'j': ['i'],
  'k': [],
  'h':[]
}    

has_path_depth_first(graph, 'f', 'k')
has_path_depth_first(graph, 'f', 'j')

```

## recursive approach

```{python}
def has_path_depth_first_recursive(graph, src, dest):
  if src == dest:
    return True
  for neighbor in graph[src]:
    if has_path_depth_first(graph, neighbor, dest):
      return True
  return False

has_path_depth_first_recursive(graph, 'f', 'k')
has_path_depth_first_recursive(graph, 'f', 'j')
```

# Breadth First Search

## iterative approach (ONLY approach)

```{python}
def has_path_breadth_first(graph, src, dest): 
    q = [src]
    while q:
        current = q.pop(0)
        if current == dest:
            return True
        for neighbor in graph[current]:
            q.append(neighbor)
    return False
  
graph = {
  'f':['g', 'i'],
  'g': ['h'],
  'i': ['g','k'],
  'j': ['i'],
  'k': [],
  'h':[]
}

has_path_breadth_first(graph, 'f', 'h')
has_path_breadth_first(graph, 'f', 'k')
has_path_breadth_first(graph, 'f', 'j')
```

# undirected graphs

## edges

```{python}
edges = [
  ['i', 'j'],
  ['k', 'i'],
  ['m', 'k'],
  ['k', 'l'],
  ['o', 'n']
]
```

## create adjency list from edges

```{python}
def edge_to_adj_list(edges):
  d = {}
  for edge in edges:
    node_1, node_2 = edge
    if node_1 not in d:
      d[node_1] = []
    if node_2 not in d:
      d[node_2] = []
    
    d[node_1].append(node_2)
    d[node_2].append(node_1)
  
  return d

edge_to_adj_list(edges)
```

## path - DFS - loop

```{python}
def is_there_path_DFS(edges, src, dst):
  d = edge_to_adj_list(edges)
  visited = set()
  stack = [src]
  while stack:
    current = stack.pop()
    if current == dst:
      return True
    if current not in visited:
      for neighbor in d[current]:
        stack.append(neighbor)
      visited.add(current)
      print(visited)
  return False

edges = [
  ['i', 'j'],
  ['k', 'i'],
  ['m', 'k'],
  ['k', 'l'],
  ['o', 'n']
]

is_there_path_DFS(edges, 'k', 'j')
```

## path - BFS - loop

```{python}
def is_there_path_BFS(edges, src, dst):
  d = edge_to_adj_list(edges)
  visited = set()
  q = [src]
  while q:
    current = q.pop(0)
    if current == dst:
      return True
    if current not in visited:
      for neighbor in d[current]:
        q.append(neighbor)
      visited.add(current)
      print(visited)
  return False


is_there_path_BFS(edges, 'k', 'j')
```

# counting connected components

```{python}
def count_con_comp(graph):
  visited = set()
  count = 0
  for node in graph:
    if node not in visited:
      visited.add(node)
      stack = [node]
      while stack:
        current = stack.pop()
        for neighbor in graph[current]:
          if neighbor not in visited:
            stack.append(neighbor)
            visited.add(neighbor)
    count +=1
  return count

graph = {1:[2], 2:[1], 3:[], 6:[4,5,7,8], 4:[6], 5:[6], 7:[6], 8:[6]}
count_con_comp(graph)
```

# counting connected components

```{python}
def count_con_comp(graph):
  count = 0
  visited = set()
  for node in graph:
    if explore(graph, node, visited):
      count +=1
  return count



def explore(graph, node, visited):
  if node in visited:
    return False
  visited.add(node)
  for neighbor in graph[node]:
      explore(graph, neighbor, visited)
  
  return True 

graph = {
  0:[8,1,5, 7], 
  7:[0], 1:[0], 
  5:[0, 8], 
  8:[0, 5], 
  2:[4,3,10, 11, 12, 13], 
  3:[4,2], 
  4:[2,3],
  10:[2],
  11:[2], 
  12:[2], 
  13:[2]}
count_con_comp(graph)
```


# largest component

```{python}
def largest_component(graph):
  max_nodes = 0
  visited = set()
  for node in graph:
      max_nodes = max(count_nodes(graph, node, visited), max_nodes)
  return max_nodes

def count_nodes(graph, node, visited):
  if node in visited:
    return 0
  count = 1
  visited.add(node)
  for neighbor in graph[node]:
      count += count_nodes(graph, neighbor, visited)
  return count

largest_component(graph)
```

# shortest path - BREADTH FIRST SEARCH

```{python}
def shortest_path(graph, src, dst):
  if src == dst:
    return 0
  q = [(src, 0)]
  visited = set()
  while q:
    current =q.pop(0) 
    for neighbor in graph[current[0]]:
      if neighbor == dst:
        return current[1]+1
      if neighbor not in visited:
        q.append((neighbor, current[1]+1))
        visited.add(neighbor)
  return -1

edges = [
  ['w','x'],
  ['x', 'y'],
  ['y', 'z'],
  ['z', 'v'],
  ['v', 'w']
]

graph = edge_to_adj_list(edges)
shortest_path(graph, 'w', 'x ')
```


# counting islands in "grid graphs"

```{python}
def create_graph_from_grid(n):
  graph = {}
  for r in range(n):
    for c in range(n):
      graph[(r,c)] = []
      if r==0 and c==0:
        graph[(r,c)].append((0, 1))
        graph[(r,c)].append((1, 0))
      elif r==0 and c==n-1:
        graph[(r,c)].append((0, n-2))
        graph[(r,c)].append((1, n-1))
      elif r==n-1 and c==0:
        graph[(r,c)].append((n-1, 1))
        graph[(r,c)].append((n-2, 0))
      elif r==n-1 and c==n-1:
        graph[(r,c)].append((n-2, n-1))
        graph[(r,c)].append((n-1, n-2))
      elif r==0:
        graph[(r,c)].append((1,c))
        graph[(r,c)].append((0,c-1))
        graph[(r,c)].append((0,c+1))
      elif r==n-1:
        graph[(r,c)].append((n-2,c))
        graph[(r,c)].append((n-1,c-1))
        graph[(r,c)].append((n-1,c+1))
      elif c==0:
        graph[(r,c)].append((r-1, 0))
        graph[(r,c)].append((r+1, 0))
        graph[(r,c)].append((r, 1))
      elif c==n-1:
        graph[(r,c)].append((r-1,n-1))
        graph[(r,c)].append((r+1,n-1))
        graph[(r,c)].append((r,n-2))        
      else:
        graph[(r,c)].append((r-1,c))
        graph[(r,c)].append((r+1,c))
        graph[(r,c)].append((r,c-1))
        graph[(r,c)].append((r,c+1))
  return graph

create_graph_from_grid(3)
```



```{python}
def count_islands(grid):
  n = len(grid)
  graph = create_graph_from_grid(n)
  count = 0
  visited = set()
  for node in graph:
    if grid[node[0]][node[1]] == 'land' and explore(graph, node, visited):
        count +=1
  return count

grid = [['land']*3, ['water']*3, ['land']*3]
count_islands(grid)
```

